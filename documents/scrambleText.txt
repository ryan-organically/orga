/*!
 * ScrambleTextPlugin 3.12.7
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 */

/* eslint-disable */

// Utility function replacements since import isn't possible
function emojiSafeSplit(str, delimiter = "", trim = true) {
    let arr = str.split(delimiter);
    return trim ? arr.map(s => s.trim()) : arr;
}

function getText(target) {
    return target.textContent || target.innerText || "";
}

// GSAP Plugin Setup
let gsap, _coreInitted,
    _getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
    _bonusValidated = 1,
    _spacesExp = /\s+/g,
    _scrambleText = (length, chars) => {
        let l = chars.length, s = "";
        while (--length > -1) {
            s += chars[~~(Math.random() * l)];
        }
        return s;
    };

class CharSet {
    constructor(chars) {
        this.chars = emojiSafeSplit(chars);
        this.sets = [];
        this.length = 50;
        for (let i = 0; i < 20; i++) {
            this.sets[i] = _scrambleText(80, this.chars);
        }
    }
    grow(newLength) {
        for (let i = 0; i < 20; i++) {
            this.sets[i] += _scrambleText(newLength - this.length, this.chars);
        }
        this.length = newLength;
    }
}

// Define Character Sets
let _upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    _lower = _upper.toLowerCase(),
    _charsLookup = {
        upperCase: new CharSet(_upper),
        lowerCase: new CharSet(_lower),
        upperAndLowerCase: new CharSet(_upper + _lower)
    };

// GSAP Plugin Object
let ScrambleTextPlugin = {
    version: "3.12.7",
    name: "scrambleText",
    register(core) {
        gsap = core;
        _coreInitted = true;
    },
    init(target, value, tween) {
        if (!_coreInitted) gsap = _getGSAP();
        this.prop = target.innerHTML !== undefined ? "innerHTML" : "textContent";
        if (!this.prop) return;

        this.target = target;
        if (typeof value !== "object") value = { text: value };

        let text = value.text || value.value || "",
            delim = value.delimiter || "",
            trim = value.trim !== false,
            charset = _charsLookup[value.chars || "upperCase"] || new CharSet(value.chars),
            original = emojiSafeSplit(getText(target).replace(_spacesExp, " "), delim, trim);

        this.text = emojiSafeSplit(text.replace(_spacesExp, " "), delim, trim);
        this.length = original.length;
        this.lengthDif = this.text.length - this.length;
        this.chars = charset.sets[(Math.random() * 20) | 0];
        this.tween = tween;
        this._props.push("scrambleText");
        return _bonusValidated;
    },
    render(ratio, data) {
        let target = data.target,
            prop = data.prop,
            text = data.text,
            i = ~~(ratio * text.length),
            startText = text.slice(0, i).join(""),
            endText = data.chars.slice(i, data.length).join("");

        target[prop] = startText + endText;
    }
};

// Register Plugin if GSAP is Available
if (_getGSAP()) {
    gsap.registerPlugin(ScrambleTextPlugin);
}
